#!/bin/bash

# Redis Cache Setup Script for AI Calendar Assistant
# This script installs and configures Redis caching for local development

echo "🚀 AI Calendar Assistant - Redis Cache Setup"
echo "============================================="

# Check if running on Windows (Git Bash/WSL)
if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" ]]; then
    echo "📟 Windows environment detected"
    
    # Check if Redis is already installed
    if command -v redis-server &> /dev/null; then
        echo "✅ Redis is already installed"
    else
        echo "❌ Redis not found. Please install Redis manually:"
        echo "   1. Download Redis for Windows from: https://github.com/microsoftarchive/redis/releases"
        echo "   2. Or use Chocolatey: choco install redis-64"
        echo "   3. Or use WSL with Ubuntu and run this script again"
        exit 1
    fi
    
elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
    echo "🐧 Linux environment detected"
    
    # Install Redis on Ubuntu/Debian
    if command -v apt-get &> /dev/null; then
        echo "📦 Installing Redis via apt-get..."
        sudo apt-get update
        sudo apt-get install -y redis-server
        
        # Configure Redis to start on boot
        sudo systemctl enable redis-server
        sudo systemctl start redis-server
        
    # Install Redis on CentOS/RHEL
    elif command -v yum &> /dev/null; then
        echo "📦 Installing Redis via yum..."
        sudo yum install -y epel-release
        sudo yum install -y redis
        
        # Configure Redis to start on boot
        sudo systemctl enable redis
        sudo systemctl start redis
        
    else
        echo "❌ Unsupported Linux distribution. Please install Redis manually."
        exit 1
    fi
    
elif [[ "$OSTYPE" == "darwin"* ]]; then
    echo "🍎 macOS environment detected"
    
    # Install Redis via Homebrew
    if command -v brew &> /dev/null; then
        echo "📦 Installing Redis via Homebrew..."
        brew install redis
        
        # Start Redis service
        brew services start redis
    else
        echo "❌ Homebrew not found. Please install Homebrew first:"
        echo "   /bin/bash -c \"\$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\""
        exit 1
    fi
    
else
    echo "❌ Unsupported operating system: $OSTYPE"
    exit 1
fi

# Verify Redis installation
echo "🔍 Verifying Redis installation..."
if command -v redis-server &> /dev/null; then
    echo "✅ Redis server is installed"
    redis-server --version
else
    echo "❌ Redis server installation failed"
    exit 1
fi

if command -v redis-cli &> /dev/null; then
    echo "✅ Redis CLI is installed"
else
    echo "❌ Redis CLI installation failed"
    exit 1
fi

# Test Redis connection
echo "🔌 Testing Redis connection..."
if redis-cli ping | grep -q PONG; then
    echo "✅ Redis is running and responding"
else
    echo "⚠️  Starting Redis server..."
    
    # Try to start Redis in different ways based on OS
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        sudo systemctl start redis-server || sudo systemctl start redis
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        brew services start redis
    else
        echo "❌ Please start Redis manually with: redis-server"
        exit 1
    fi
    
    # Wait a moment and test again
    sleep 2
    if redis-cli ping | grep -q PONG; then
        echo "✅ Redis is now running"
    else
        echo "❌ Failed to start Redis. Please start it manually."
        exit 1
    fi
fi

# Install Python Redis dependencies
echo "🐍 Installing Python Redis dependencies..."
if command -v pip &> /dev/null; then
    pip install redis aioredis
    echo "✅ Python Redis packages installed"
else
    echo "❌ pip not found. Please install Python Redis packages manually:"
    echo "   pip install redis aioredis"
fi

# Create Redis configuration file
echo "⚙️  Creating Redis configuration..."
cat > .env.redis << EOF
# Redis Cache Configuration for AI Calendar Assistant
# Generated by setup script on $(date)

# Redis Connection
REDIS_URL=redis://localhost:6379
REDIS_CACHE_ENABLED=true

# Cache TTL Settings (in seconds)
GRAPH_CACHE_TTL_SECONDS=300
CACHE_TTL_USER_INFO=600
CACHE_TTL_DEPARTMENTS=3600
CACHE_TTL_ROOMS=1800
CACHE_TTL_CALENDAR=180
CACHE_TTL_MAILBOX=1800
CACHE_TTL_SEARCH=300

# Redis Performance Settings
REDIS_MAX_CONNECTIONS=20
REDIS_CONNECT_TIMEOUT=5
REDIS_SOCKET_TIMEOUT=5
REDIS_HEALTH_CHECK_INTERVAL=30

# Debug Settings
DEBUG_GRAPH_CACHE=false
CACHE_METRICS_ENABLED=true
EOF

echo "✅ Redis configuration created in .env.redis"

# Add Redis config to main .env file if it exists
if [ -f .env ]; then
    echo "" >> .env
    echo "# Redis Cache Configuration" >> .env
    echo "REDIS_URL=redis://localhost:6379" >> .env
    echo "REDIS_CACHE_ENABLED=true" >> .env
    echo "✅ Redis settings added to .env file"
fi

# Create a simple Redis test script
cat > test_redis_setup.py << 'EOF'
#!/usr/bin/env python3
"""Simple Redis connection test"""

import asyncio
import os

try:
    import aioredis
    import redis
    print("✅ Redis Python packages are installed")
except ImportError as e:
    print(f"❌ Missing Redis packages: {e}")
    print("Run: pip install redis aioredis")
    exit(1)

async def test_redis():
    """Test Redis connection"""
    try:
        # Test sync Redis
        r = redis.Redis(host='localhost', port=6379, decode_responses=True)
        r.ping()
        print("✅ Sync Redis connection successful")
        
        # Test async Redis
        ar = aioredis.from_url("redis://localhost:6379", decode_responses=True)
        await ar.ping()
        print("✅ Async Redis connection successful")
        
        # Test basic operations
        await ar.set("test_key", "test_value", ex=10)
        value = await ar.get("test_key")
        print(f"✅ Redis operations working: {value}")
        
        await ar.close()
        print("✅ Redis connection closed properly")
        
    except Exception as e:
        print(f"❌ Redis test failed: {e}")
        return False
    
    return True

if __name__ == "__main__":
    print("🔍 Testing Redis setup...")
    success = asyncio.run(test_redis())
    if success:
        print("🎉 Redis setup is working correctly!")
    else:
        print("❌ Redis setup has issues. Check the installation.")
EOF

chmod +x test_redis_setup.py

echo "🧪 Running Redis setup test..."
python test_redis_setup.py

echo ""
echo "🎉 Redis Cache Setup Complete!"
echo "==============================="
echo ""
echo "📋 Next Steps:"
echo "1. Test the cache with: python test_redis_cache.py"
echo "2. Configure your Graph API credentials in .env file"
echo "3. Start your application with Redis caching enabled"
echo ""
echo "⚙️  Configuration Files Created:"
echo "  - .env.redis (Redis-specific settings)"
echo "  - test_redis_setup.py (Connection test script)"
echo ""
echo "🔧 Useful Commands:"
echo "  - Start Redis: redis-server"
echo "  - Test connection: redis-cli ping"
echo "  - Monitor Redis: redis-cli monitor"
echo "  - View Redis info: redis-cli info"
echo ""
echo "📚 See REDIS_DEPLOYMENT_GUIDE.md for production deployment instructions"
